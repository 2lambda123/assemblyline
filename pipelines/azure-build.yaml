
name: build

trigger:
  tags:
    include: ["v*"]
pr: none

pool:
  vmImage: "ubuntu-20.04"

resources:
  containers:
    - container: redis
      image: redis
      ports:
        - 6379:6379
    - container: elasticsearch
      image: cccs/elasticsearch:7.8.0
      env:
        ES_JAVA_OPTS: "-Xms256m -Xmx512m"
        DISCOVERY_TYPE: "single-node"
      ports:
        - 9200:9200
    - container: minio
      image: cccs/minio
      env:
        MINIO_ACCESS_KEY: al_storage_key
        MINIO_SECRET_KEY: Ch@ngeTh!sPa33w0rd
      ports:
        - 9000:9000

stages:
  - stage: build
    displayName: Build and Test
    jobs:
      - job: build_python
        displayName: Build Python Packages
        steps:
          - checkout: self
            submodules: recursive
          - task: UsePythonVersion@0
            displayName: Set python version
            inputs:
              versionSpec: 3.9
          - script: |
              set -x  # Echo commands before they are run

              # Figure out what the build kind is
              export VERSION=${BUILD_SOURCEBRANCH#"refs/tags/v"}
              export COMMIT=`git rev-parse --verify ${BUILD_SOURCEBRANCH}`
              export BRANCH=`git ls-remote --heads origin | grep $COMMIT | sed "s/.*\///"`
              echo "Building $VERSION On branch $BRANCH"
              if [[ "$VERSION" == *stable* ]] && [[ $BRANCH != "master" ]]; then exit 1; fi
              if [[ "$VERSION" == *dev* ]] && [[ $BRANCH != "dev" ]]; then exit 1; fi
              export VERSION=${VERSION/stable}
              export VERSION=${VERSION/beta/b}

              # make sure we are on the right branches for all other repos
              git submodule foreach git checkout -B $BRANCH --track origin/$BRANCH
              git submodule foreach git pull
              sudo env "PATH=$PATH" python -m pip install --no-cache-dir -U wheel cython pip

              # Build base
              cd assemblyline-base
              echo $VERSION > assemblyline/VERSION
              python setup.py sdist --dist-dir ${SYSTEM_DEFAULTWORKINGDIRECTORY}/dist/ &

              # Build core
              cd ../assemblyline-core
              echo $VERSION > assemblyline_core/VERSION
              python setup.py sdist --dist-dir ${SYSTEM_DEFAULTWORKINGDIRECTORY}/dist/ &

              # Build ui
              cd ../assemblyline-ui
              echo $VERSION > assemblyline_ui/VERSION
              python setup.py bdist_wheel --dist-dir ${SYSTEM_DEFAULTWORKINGDIRECTORY}/dist/ &

              # Build service server
              cd ../assemblyline-service-server
              echo $VERSION > assemblyline_service_server/VERSION
              python setup.py bdist_wheel --dist-dir ${SYSTEM_DEFAULTWORKINGDIRECTORY}/dist/ &

              cd ../assemblyline-service-client
              echo $VERSION > assemblyline_service_client/VERSION
              python setup.py bdist_wheel --dist-dir ${SYSTEM_DEFAULTWORKINGDIRECTORY}/dist/ &

              cd ../assemblyline-v4-service
              echo $VERSION > assemblyline_v4_service/VERSION
              python setup.py bdist_wheel --dist-dir ${SYSTEM_DEFAULTWORKINGDIRECTORY}/dist/ &

              wait
              cd ../
              ls dist
            displayName: Build Python Packages
          - publish: $(System.DefaultWorkingDirectory)
            artifact: working

      - job: build_frontend
        dependsOn: build_python
        displayName: Build Frontend Image
        steps:
          - checkout: none
          - download: current
            artifact: working
          - task: Docker@2
            displayName: Login to docker registry
            inputs:
              command: login
              containerRegistry: cccstemp
          - script: |
              set -xv  # Echo commands before they are run
              export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}
              if [[ "$TAG" == *stable* ]]; then export BUILD_TYPE=stable; else export BUILD_TYPE=latest; fi
              export VERSION=${TAG/stable}
              export VERSION=${VERSION/beta/b}
              export SERIES="`expr $TAG : '\([0-9]\+\.[0-9]\+\.\)'`${BUILD_TYPE}"

              export IMAGE=cccstemp.azurecr.io/assemblyline-ui-frontend
              docker build --build-arg version=$VERSION -t $IMAGE:$TAG -t $IMAGE:$BUILD_TYPE -t $IMAGE:$SERIES .
              docker push $IMAGE -q --all-tags
            workingDirectory: $(Pipeline.Workspace)/working/assemblyline-ui-frontend/
            displayName: Build Frontend

      - job: build_base
        dependsOn: build_python
        displayName: Build Base Image
        steps:
          - checkout: none
          - download: current
            artifact: working
          - task: Docker@2
            displayName: Login to docker registry
            inputs:
              command: login
              containerRegistry: cccstemp
          - script: |
              set -xv  # Echo commands before they are run
              export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}
              if [[ "$TAG" == *stable* ]]; then export BUILD_TYPE=stable; else export BUILD_TYPE=latest; fi
              export VERSION=${TAG/stable}
              export VERSION=${VERSION/beta/b}
              export SERIES="`expr $TAG : '\([0-9]\+\.[0-9]\+\.\)'`${BUILD_TYPE}"

              cd assemblyline-base
              mv ../dist/ dist

              set +xv
              export IMAGE=cccstemp.azurecr.io/assemblyline
              docker build --build-arg version=$VERSION -t $IMAGE:$TAG -t $IMAGE:$BUILD_TYPE -t $IMAGE:$SERIES . | while read line ; do echo "$(date) | $line"; done;
              docker push $IMAGE -q --all-tags
            workingDirectory: $(Pipeline.Workspace)/working
            displayName: Build Base

      - job: build_core
        dependsOn: build_base
        displayName: Build Core Image
        steps:
          - checkout: none
          - download: current
            artifact: working
          - task: Docker@2
            displayName: Login to docker registry
            inputs:
              command: login
              containerRegistry: cccstemp
          - script: |
              set -xv  # Echo commands before they are run
              export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}
              if [[ "$TAG" == *stable* ]]; then export BUILD_TYPE=stable; else export BUILD_TYPE=latest; fi
              export VERSION=${TAG/stable}
              export VERSION=${VERSION/beta/b}
              export SERIES="`expr $TAG : '\([0-9]\+\.[0-9]\+\.\)'`${BUILD_TYPE}"

              cd assemblyline-core
              mv ../dist/ dist

              export BASE=cccstemp.azurecr.io/assemblyline
              export IMAGE=cccstemp.azurecr.io/assemblyline-core
              docker build --build-arg base=$BASE \
                           --build-arg version=$VERSION \
                           --build-arg branch=$BUILD_TYPE \
                           -t $IMAGE:$TAG -t $IMAGE:$BUILD_TYPE -t $IMAGE:$SERIES . -f deployment/Dockerfile
              docker push $IMAGE -q --all-tags
            workingDirectory: $(Pipeline.Workspace)/working
            displayName: Build Core

      - job: build_service_server
        dependsOn: build_core
        displayName: Build Service Server Image
        steps:
          - checkout: none
          - download: current
            artifact: working
          - task: Docker@2
            displayName: Login to docker registry
            inputs:
              command: login
              containerRegistry: cccstemp
          - script: |
              set -xv  # Echo commands before they are run
              export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}
              if [[ "$TAG" == *stable* ]]; then export BUILD_TYPE=stable; else export BUILD_TYPE=latest; fi
              export VERSION=${TAG/stable}
              export VERSION=${VERSION/beta/b}
              export SERIES="`expr $TAG : '\([0-9]\+\.[0-9]\+\.\)'`${BUILD_TYPE}"

              cd assemblyline-service-server
              mv ../dist/ dist

              export BASE=cccstemp.azurecr.io/assemblyline-core
              export IMAGE=cccstemp.azurecr.io/assemblyline-service-server
              docker build --build-arg base=$BASE \
                           --build-arg version=$VERSION \
                           --build-arg branch=$BUILD_TYPE \
                           -t $IMAGE:$TAG -t $IMAGE:$BUILD_TYPE -t $IMAGE:$SERIES . -f docker/Dockerfile
              docker push $IMAGE -q --all-tags
            workingDirectory: $(Pipeline.Workspace)/working
            displayName: Build Core

      - job: build_service_base
        dependsOn: build_base
        displayName: Build Service Base Image
        steps:
          - checkout: none
          - download: current
            artifact: working
          - task: Docker@2
            displayName: Login to docker registry
            inputs:
              command: login
              containerRegistry: cccstemp
          - script: |
              set -xv  # Echo commands before they are run
              export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}
              if [[ "$TAG" == *stable* ]]; then export BUILD_TYPE=stable; else export BUILD_TYPE=latest; fi
              export VERSION=${TAG/stable}
              export VERSION=${VERSION/beta/b}
              export SERIES="`expr $TAG : '\([0-9]\+\.[0-9]\+\.\)'`${BUILD_TYPE}"

              cd assemblyline-v4-service
              mv ../dist/ dist

              set +xv

              export BASE=cccstemp.azurecr.io/assemblyline
              export IMAGE=cccstemp.azurecr.io/assemblyline-v4-service-base
              docker build --build-arg base=$BASE \
                           --build-arg version=$VERSION \
                           --build-arg branch=$BUILD_TYPE -t $IMAGE:$TAG -t $IMAGE:$SERIES -t $IMAGE:$BUILD_TYPE . -f docker/Dockerfile | while read line ; do echo "$(date) | $line"; done;
              docker push $IMAGE -q --all-tags

              export BASE=$IMAGE
              export IMAGE=cccstemp.azurecr.io/assemblyline-service-resultsample
              docker build --build-arg base=$BASE \
                           --build-arg version=$VERSION \
                           --build-arg branch=$BUILD_TYPE -t $IMAGE:$TAG -t $IMAGE:$SERIES -t $IMAGE:$BUILD_TYPE . -f assemblyline_result_sample_service/Dockerfile | while read line ; do echo "$(date) | $line"; done;
              docker push $IMAGE -q --all-tags

            workingDirectory: $(Pipeline.Workspace)/working
            displayName: Build Service Base

      - job: build_ui
        dependsOn: ["build_base", "build_python"]
        displayName: Build UI Image
        steps:
          - checkout: none
          - download: current
            artifact: working
          - task: Docker@2
            displayName: Login to docker registry
            inputs:
              command: login
              containerRegistry: cccstemp
          - script: |
              set -xv  # Echo commands before they are run
              export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}
              if [[ "$TAG" == *stable* ]]; then export BUILD_TYPE=stable; else export BUILD_TYPE=latest; fi
              export VERSION=${TAG/stable}
              export VERSION=${VERSION/beta/b}
              export SERIES="`expr $TAG : '\([0-9]\+\.[0-9]\+\.\)'`${BUILD_TYPE}"

              cd assemblyline-ui
              mv ../dist/ dist

              export BASE=cccstemp.azurecr.io/assemblyline

              set +xv
              export IMAGE=cccstemp.azurecr.io/assemblyline-ui
              docker build --build-arg base=$BASE --build-arg version=$VERSION --build-arg branch=$BUILD_TYPE -t $IMAGE:$TAG -t $IMAGE:$BUILD_TYPE -t $IMAGE:$SERIES . -f docker/ui/Dockerfile | while read line ; do echo "$(date) | $line"; done;
              docker push $IMAGE -q --all-tags

              export IMAGE=cccstemp.azurecr.io/assemblyline-socketio
              docker build --build-arg base=$BASE --build-arg version=$VERSION --build-arg branch=$BUILD_TYPE -t $IMAGE:$TAG -t $IMAGE:$BUILD_TYPE -t $IMAGE:$SERIES . -f docker/socketio/Dockerfile | while read line ; do echo "$(date) | $line"; done;
              docker push $IMAGE -q --all-tags
            workingDirectory: $(Pipeline.Workspace)/working
            displayName: Build UI

      - job: test_base
        dependsOn: build_base
        displayName: Test Base Image
        timeoutInMinutes: 10
        services:
          elasticsearch: elasticsearch
          redis: redis
          minio: minio
        steps:
          - checkout: none
          - download: current
            artifact: working
          - task: Docker@2
            displayName: Login to docker registry
            inputs:
              command: login
              containerRegistry: cccstemp
          - script: |
              set -xv  # Echo commands before they are run
              export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}

              cd assemblyline-base

              docker run -v `pwd`/test:/test \
                         -v $(Pipeline.Workspace)/working/pipelines/base-config.yaml:/etc/assemblyline/config.yml \
                         -w /test \
                         --network host \
                         cccstemp.azurecr.io/assemblyline:${TAG} \
                         /bin/bash -c "pip install -r requirements.txt; CI=1 pytest -rsx --durations=10"
            workingDirectory: $(Pipeline.Workspace)/working
            displayName: Test Base

      - job: test_core
        dependsOn: build_core
        timeoutInMinutes: 10
        services:
          elasticsearch: elasticsearch
          redis: redis
        displayName: Test Core Image
        steps:
          - checkout: none
          - download: current
            artifact: working
          - task: Docker@2
            displayName: Login to docker registry
            inputs:
              command: login
              containerRegistry: cccstemp
          - script: |
              set -xv  # Echo commands before they are run
              export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}

              cd assemblyline-core

              docker run -v `pwd`/test:/test \
                         -v $(Pipeline.Workspace)/working/pipelines/base-config.yaml:/etc/assemblyline/config.yml \
                         -w /test \
                         --network host \
                         cccstemp.azurecr.io/assemblyline-core:${TAG} /bin/bash -c "pip install -r requirements.txt; CI=1 pytest -rsx --durations=10"
            workingDirectory: $(Pipeline.Workspace)/working
            displayName: Test Core

      - job: test_ui
        dependsOn: ["build_ui", "build_frontend"]
        timeoutInMinutes: 10
        services:
          elasticsearch: elasticsearch
          redis: redis
          minio: minio
        displayName: Test UI Image
        steps:
          - checkout: none
          - download: current
            artifact: working
          - task: Docker@2
            displayName: Login to docker registry
            inputs:
              command: login
              containerRegistry: cccstemp
          - script: |
              export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}

              docker run -d --name ui --network host --restart on-failure cccstemp.azurecr.io/assemblyline-ui:$TAG &
              docker run -d --name socketsrv --network host --restart on-failure cccstemp.azurecr.io/assemblyline-socketio:$TAG &
              docker run -d --name frontend --network host --restart on-failure cccstemp.azurecr.io/assemblyline-ui-frontend:$TAG &
              docker run -d --name nginx --network host --restart on-failure -e "FRONTEND_HOST=localhost" -e "UI_HOST=localhost" -e "SOCKET_HOST=localhost" -e "TEMPLATE=minimal" -e "FQDN=localhost" cccs/nginx-ssl-frontend &
              wait

              wget https://localhost:5000 --no-check-certificate --timeout=2 --retry-on-http-error=502 --waitretry=10 --retry-connrefused
              wget https://localhost:5002 --no-check-certificate --timeout=2 --retry-on-http-error=502 --waitretry=10 --retry-connrefused
              wget https://localhost --no-check-certificate --timeout=2 --retry-on-http-error=502 --waitretry=10 --retry-connrefused

              docker run -v `pwd`/test:/test \
                         -v $(Pipeline.Workspace)/working/pipelines/ui-config.yaml:/etc/assemblyline/config.yml \
                         -w /test \
                         --network host \
                         cccstemp.azurecr.io/assemblyline-socketio:${TAG} \
                         /bin/bash -c "pip install -r requirements.txt; CI=1 pytest -rsx --durations=10"
            workingDirectory: $(Pipeline.Workspace)/working/assemblyline-ui
            displayName: Test UI

      - job: test_service_server
        dependsOn: build_service_server
        timeoutInMinutes: 10
        services:
          elasticsearch: elasticsearch
          redis: redis
          minio: minio
        displayName: Test Service Server Image
        steps:
          - checkout: none
          - download: current
            artifact: working
          - task: Docker@2
            displayName: Login to docker registry
            inputs:
              command: login
              containerRegistry: cccstemp
          - script: |
              export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}

              docker run -d --name server --network host --restart on-failure cccstemp.azurecr.io/assemblyline-service-server:$TAG

              docker run -v `pwd`/test:/test \
                         -v $(Pipeline.Workspace)/working/pipelines/base-config.yaml:/etc/assemblyline/config.yml \
                         -w /test \
                         --network host \
                         cccstemp.azurecr.io/assemblyline-service-server:${TAG} \
                         /bin/bash -c "pip install -r requirements.txt; CI=1 pytest -rsx --durations=10"
            workingDirectory: $(Pipeline.Workspace)/working/assemblyline-service-server
            displayName: Test Service Server

      - job: test_service_base
        dependsOn: build_service_base
        timeoutInMinutes: 10
        services:
          elasticsearch: elasticsearch
          redis: redis
          minio: minio
        displayName: Test Service Base Image
        steps:
          - checkout: none
          - download: current
            artifact: working
          - task: Docker@2
            displayName: Login to docker registry
            inputs:
              command: login
              containerRegistry: cccstemp
          - script: |
              export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}

              docker run -v `pwd`/test:/test \
                         -v $(Pipeline.Workspace)/working/pipelines/base-config.yaml:/etc/assemblyline/config.yml \
                         -w /test \
                         cccstemp.azurecr.io/assemblyline-v4-service-base:${TAG} \
                         /bin/bash -c "pip install -r requirements.txt; CI=1 pytest -rsx --durations=10"
            workingDirectory: $(Pipeline.Workspace)/working/assemblyline-v4-service
            displayName: Test Service Server

  - stage: deploy
    displayName: Deploy
    jobs:
    - job: deploy_python
      displayName: Deploy Python Packages
      steps:
        - checkout: none
        - download: current
          artifact: working
        - script: |
            export TAG=${BUILD_SOURCEBRANCH#"refs/tags/v"}
            echo "Fake deploy for now"
          workingDirectory: $(Pipeline.Workspace)/working/dist
          displayName: Deploy Python Packages